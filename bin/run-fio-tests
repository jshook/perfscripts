#!/bin/bash

function print_usage() {
    echo "run-fio-tests [-c config_dir] -r results_dir -d data_dir [number_cycles]"
    exit 1
}

FIO_TOPDIR=`dirname $0`/..
FIO_CONFDIR=${FIO_TOPDIR}/conf

while getopts ":hd:r:c:" opt; do
    case $opt in
        d) FIO_DATADIR=$OPTARG
           ;;
        r) FIO_RESULTS=$OPTARG
           ;;
        c) FIO_CONFDIR=$OPTARG
           ;;
        h) print_usage
           ;;
    esac
done

FIO_DATADIR=${FIO_DATADIR:?'data directory is required. Pass it as argument of "-r" parameter'}
FIO_RESULTS=${FIO_RESULTS:?'results directory is required. Pass it as argument of "-r" parameter'}

mkdir -p ${FIO_RESULTS}
if [ ! -d ${FIO_DATADIR} ]
then
 echo "directory ${FIO_DATADIR} must exist"
 exit 2
fi

cp ${FIO_CONFDIR}/_README.md ${FIO_RESULTS}

shift "$(($OPTIND -1))"

export cycle=0
export cycles=100
if [ -n "$1" ] ; then cycles=$1 ; echo "stopping after $cycles tests" ; fi

#for fioconf in $(cd ${FIO_CONFDIR} ; ls *.fio | grep -v global)
for fioconf in $(cat ${FIO_CONFDIR}/test_order.lst | egrep -v '^ *$|^ *#')
do
  (( cycle += 1 ))
  testname=${fioconf%-*.fio}
  testtype=${testname%-*}
  fiofiles="${testtype}-global.fio $fioconf"
  echo "name:$testname type:$testtype  fiofiles: $fiofiles"

  (cd ${FIO_CONFDIR} ; cat $fiofiles) | \
  (cd ${FIO_DATADIR} ; fio - --eta=always --output ${FIO_RESULTS}/$fioconf.out )

  if (( cycle >= cycles )) ; then echo ; echo "stopping at cycle $cycle" ; break ; fi
  echo

done
