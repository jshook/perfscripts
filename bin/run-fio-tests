#!/bin/bash

#set -x

function print_usage() {
    echo "run-fio-tests [-c config_dir] -r results_dir -d data_dir [number_cycles]"
    exit 1
}

HOME=$PWD
FIO_TOPDIR=`dirname $0`/..
FIO_CONFDIR=${FIO_TOPDIR}/conf
FIO_FORMAT=json
FIO_RESSUFFIX=json
FIO_RESUPGRADE=""

while getopts ":hnud:r:c:" opt; do
    case $opt in
        d) FIO_DATADIR=$OPTARG
           ;;
        r) FIO_RESULTS=$OPTARG
           ;;
        c) FIO_CONFDIR=$OPTARG
           ;;
        n) FIO_FORMAT=normal
           FIO_RESSUFFIX=out
           ;;
        u) FIO_RESUPGRADE="true"
           ;;
        h) print_usage
           ;;
    esac
done

FIO_RESULTS=${FIO_RESULTS:?'results directory is required. Pass it as argument of "-r" parameter'}
if [ -z "${FIO_RESUPGRADE}" ] ; then
    FIO_DATADIR=${FIO_DATADIR:?'data directory is required. Pass it as argument of "-d" parameter'}

    mkdir -p ${FIO_RESULTS}
    mkdir -p ${FIO_DATADIR}

    # Make DATADIR work with relative directories
    cd ${FIO_DATADIR}
    if [ ! -d "${FIO_RESULTS}" ]; then
      FIO_RESULTS=${HOME}/${FIO_RESULTS}
    fi

    cd ${HOME}


    if [ ! -d ${FIO_DATADIR} ]
    then
     echo "directory ${FIO_DATADIR} must exist"
     exit 2
    fi

    cp ${FIO_CONFDIR}/_README.md ${FIO_RESULTS}

    shift "$(($OPTIND -1))"

    export cycle=0
    export cycles=100
    if [ -n "$1" ] ; then cycles=$1 ; echo "stopping after $cycles tests" ; fi

    #for fioconf in $(cd ${FIO_CONFDIR} ; ls *.fio | grep -v global)
    for fioconf in $(cat ${FIO_CONFDIR}/test_order.lst | egrep -v '^ *$|^ *#')
    do
        (( cycle += 1 ))
        testname=${fioconf%-*.fio}
        testtype=${testname%-*}
        fiofiles="${testtype}-global.fio $fioconf"
        echo "name:$testname type:$testtype  fiofiles: $fiofiles"

        (cd ${FIO_CONFDIR} ; cat $fiofiles) | \
            (cd ${FIO_DATADIR} ; fio - --eta=always --output-format=${FIO_FORMAT} \
                                     --output ${FIO_RESULTS}/$fioconf.${FIO_RESSUFFIX} )

        if (( cycle >= cycles )) ; then echo ; echo "stopping at cycle $cycle" ; break ; fi
        echo

    done
fi

if [ "${FIO_FORMAT}" = "json" ] ; then
    function join { local IFS="$1"; shift; echo "$*"; }

    results=()

    for f in `ls ${FIO_RESULTS}/*.json|sort`
    do
        BNAME="`basename $f`"
        if [ "$BNAME" != "files.json" ]; then
            results+=("\"$BNAME\"")
        fi
    done

    echo "[" > ${FIO_RESULTS}/files.json
    join , ${results[@]} >> ${FIO_RESULTS}/files.json
    echo "]" >> ${FIO_RESULTS}/files.json

    cp ${FIO_TOPDIR}/templates/ui-bundle.tgz ${FIO_RESULTS}/
    (cd ${FIO_RESULTS}/; tar -xzf ui-bundle.tgz; rm -f ui-bundle.tgz)

    echo "If this is a remote system you can view the results in a browser with:"
    echo "cd ${FIO_RESULTS}"
    echo "python -m SimpleHTTPServer"
fi
